// Adicionar taxa fixa aos pre√ßos
const TAXA_ADICIONAL = 2.00;

export const products = [
    {
        id: 'netflix1',
        name: 'NETFLIX 4K 30 DIAS | 1 TELA COM PIN',
        emoji: 'üì∫',
        price: 16.90 + TAXA_ADICIONAL,
        oldPrice: 19.90 + TAXA_ADICIONAL,
        category: 'netflix',
        description: `‚ú® CONTA PREMIUM 4K ULTRA HD
        
üîê Caracter√≠sticas:
‚Ä¢ Plano Premium 4K Ultra HD
‚Ä¢ Dura√ß√£o: 30 dias
‚Ä¢ Tela Privada com PIN
‚Ä¢ Acesso Garantido
‚Ä¢ Suporte 24/7
‚Ä¢ Envio Autom√°tico

üì± Funciona em:
‚Ä¢ Smart TVs
‚Ä¢ Celulares
‚Ä¢ Tablets
‚Ä¢ Computadores
‚Ä¢ Video Games

‚ö° Entrega Imediata
üîí Conta Privada
‚úÖ Garantia de Funcionamento`,
        shortDescription: 'Netflix Premium 4K - 30 dias com PIN ‚ú®',
        highlight: 'PREMIUM',
        stock: 146514,
        benefits: [
            'üì∫ 4K Ultra HD Garantido',
            'üîí PIN Exclusivo',
            'üì± Todos Dispositivos',
            '‚ö° Entrega Autom√°tica',
            'üéÆ Compat√≠vel c/ Games'
        ]
    },
    {
        id: 'netflix2',
        name: '[TV] NETFLIX 4K 30 DIAS | 1 TELA COM PIN',
        emoji: 'üé¨',
        price: 15.90 + TAXA_ADICIONAL,
        oldPrice: 18.90 + TAXA_ADICIONAL,
        category: 'netflix',
        description: `‚ú® EXCLUSIVO PARA SMART TVs
        
üì∫ Caracter√≠sticas:
‚Ä¢ Plano Premium 4K Ultra HD
‚Ä¢ Dura√ß√£o: 30 dias
‚Ä¢ PIN de Acesso √önico
‚Ä¢ Otimizado para TVs
‚Ä¢ Suporte Especializado
‚Ä¢ Envio Instant√¢neo

üí° Compat√≠vel com:
‚Ä¢ Samsung Smart TV
‚Ä¢ LG Smart TV
‚Ä¢ Android TV
‚Ä¢ TCL
‚Ä¢ Philips Smart TV
‚Ä¢ Todas Smart TVs

‚ö° Ativa√ß√£o Imediata
üîí Acesso Exclusivo
‚úÖ Garantia de 30 dias`,
        shortDescription: 'Netflix TV Premium 4K - 30 dias com PIN üì∫',
        highlight: 'TV ONLY',
        stock: 13622,
        benefits: [
            'üì∫ 4K Ultra HD TV',
            'üîí PIN Exclusivo',
            'üñ•Ô∏è Smart TV Only',
            '‚ö° Ativa√ß√£o Imediata',
            '‚ú® Qualidade M√°xima'
        ]
    },
    {
        id: 'netflix3',
        name: 'NETFLIX 4K 10 DIAS COMPARTILHADA',
        emoji: 'üé•',
        price: 5.89 + TAXA_ADICIONAL,
        oldPrice: 7.99 + TAXA_ADICIONAL,
        category: 'netflix',
        description: `üé¨ CONTA COMPARTILHADA 4K
        
üì± Detalhes do Plano:
‚Ä¢ Qualidade 4K Ultra HD
‚Ä¢ 10 Dias de Acesso
‚Ä¢ Perfil Compartilhado
‚Ä¢ Multi-dispositivos
‚Ä¢ Suporte B√°sico
‚Ä¢ Envio Autom√°tico

üíª Compatibilidade:
‚Ä¢ Todos Dispositivos
‚Ä¢ Smart TVs
‚Ä¢ Smartphones
‚Ä¢ PCs e Notebooks
‚Ä¢ Tablets

‚ö° Entrega em 1 minuto
üë• Acesso Compartilhado
‚úÖ Garantia de Reposi√ß√£o`,
        shortDescription: 'Netflix 4K Compartilhada - 10 dias üé¨',
        highlight: 'PROMO',
        stock: 5154,
        benefits: [
            'üì∫ 4K Garantido',
            'üë• Compartilhada',
            'üì± Multi-Device',
            '‚ö° Entrega R√°pida',
            'üí∞ Melhor Custo'
        ]
    },
    {
        id: 'netflix4',
        name: '[TV] NETFLIX 4K 7 DIAS COMPARTILHADA',
        emoji: 'üéûÔ∏è',
        price: 2.99 + TAXA_ADICIONAL,
        oldPrice: 4.99 + TAXA_ADICIONAL,
        category: 'netflix',
        description: `üì∫ ACESSO TV 7 DIAS
        
üé¨ Informa√ß√µes:
‚Ä¢ Qualidade 4K Ultra HD
‚Ä¢ 7 Dias de Acesso
‚Ä¢ Perfil Compartilhado
‚Ä¢ Exclusivo Smart TVs
‚Ä¢ Suporte via Chat
‚Ä¢ Envio Autom√°tico

üì∫ Funciona em:
‚Ä¢ Todas Smart TVs
‚Ä¢ Android TV
‚Ä¢ TV Box
‚Ä¢ Apple TV
‚Ä¢ Chromecast

‚ö° Ativa√ß√£o Imediata
üë• Modo Compartilhado
‚úÖ Garantia de 7 dias`,
        shortDescription: 'Netflix TV 4K Compartilhada - 7 dias üì∫',
        highlight: 'B√ÅSICO',
        stock: 120,
        benefits: [
            'üì∫ 4K Ultra HD',
            'üë• Compartilhada',
            'üñ•Ô∏è TV Only',
            '‚ö° Entrega R√°pida',
            'üí∞ Menor Pre√ßo'
        ]
    }
];

// Adicionar array de ofertas rel√¢mpago
export const flashDeals = [
    {
        id: 'flash1',
        name: 'Super Smartphone',
        emoji: 'üì±',
        price: 1499.99,
        oldPrice: 2999.99,
        description: 'Smartphone top de linha com 50% OFF!',
        discount: 50,
        stock: 5,
        endTime: new Date().getTime() + (24 * 60 * 60 * 1000) // 24 horas
    },
    {
        id: 'flash2',
        name: 'Fones Wireless',
        emoji: 'üéß',
        price: 199.99,
        oldPrice: 499.99,
        description: 'Fones de ouvido com cancelamento de ru√≠do',
        discount: 60,
        stock: 8,
        endTime: new Date().getTime() + (12 * 60 * 60 * 1000) // 12 horas
    },
    {
        id: 'flash3',
        name: 'Smartwatch Pro',
        emoji: '‚åö',
        price: 599.99,
        oldPrice: 1299.99,
        description: 'Rel√≥gio inteligente com GPS e monitor card√≠aco',
        discount: 55,
        stock: 3,
        endTime: new Date().getTime() + (8 * 60 * 60 * 1000) // 8 horas
    }
];

// Adicionar fun√ß√£o de loading
function showLoading(container) {
    container.innerHTML = `
        <div class="loading">
            <span></span>
            <span></span>
            <span></span>
        </div>
    `;
}

// Fun√ß√£o para abrir o modal de pr√©-visualiza√ß√£o
function openPreviewModal(product) {
    const modal = document.getElementById('previewModal');
    const previewBody = document.getElementById('previewBody');
    
    modal.classList.add('active');
    
    const discount = ((product.oldPrice - product.price) / product.oldPrice * 100).toFixed(0);
    const savings = (product.oldPrice - product.price).toFixed(2);
    
    previewBody.innerHTML = `
        <div class="preview-emoji">${product.emoji}</div>
        ${product.highlight ? `<span class="product-highlight">${product.highlight}</span>` : ''}
        <div class="preview-details">
            <div class="preview-header-info">
                <h3 class="preview-title">${product.name}</h3>
                <div class="preview-price-container">
                    <p class="preview-old-price">De R$ ${product.oldPrice.toFixed(2)}</p>
                    <p class="preview-price">Por R$ ${product.price.toFixed(2)}</p>
                    <p class="preview-savings">Economia de R$ ${savings} (${discount}% OFF)</p>
                </div>
            </div>
            
            <div class="preview-benefits">
                <h4>‚ú® Principais Benef√≠cios:</h4>
                <ul>
                    ${product.benefits.map(benefit => `<li>${benefit}</li>`).join('')}
                </ul>
            </div>

            <div class="preview-stock">
                <p class="stock-warning">üî• Apenas ${product.stock} unidades em estoque!</p>
                <div class="stock-bar">
                    <div class="stock-progress" style="width: ${(product.stock / 10) * 100}%"></div>
                </div>
            </div>

            <p class="preview-description">${product.description}</p>
            
            <div class="preview-actions">
                <div class="preview-quantity">
                    <button class="quantity-decrease">-</button>
                    <span class="quantity-value">1</span>
                    <button class="quantity-increase">+</button>
                </div>
                <button class="add-to-cart-btn pulse-animation" data-product-id="${product.id}">
                    Comprar Agora 
                </button>
                <p class="secure-purchase">üîí Compra 100% Segura</p>
            </div>
        </div>
    `;
    
    setupQuantityControls(previewBody);
}

// Separar setup dos controles de quantidade
function setupQuantityControls(previewBody) {
    const quantityValue = previewBody.querySelector('.quantity-value');
    const decreaseBtn = previewBody.querySelector('.quantity-decrease');
    const increaseBtn = previewBody.querySelector('.quantity-increase');
    
    if (decreaseBtn && increaseBtn && quantityValue) {
        decreaseBtn.addEventListener('click', () => {
            const currentValue = parseInt(quantityValue.textContent);
            if (currentValue > 1) {
                quantityValue.textContent = currentValue - 1;
            }
        });
        
        increaseBtn.addEventListener('click', () => {
            const currentValue = parseInt(quantityValue.textContent);
            quantityValue.textContent = currentValue + 1;
        });
    }
}

// Modificar a fun√ß√£o renderProducts para incluir loading
export function renderProducts(categoryFilter = 'all') {
    const productsGrid = document.getElementById('productsGrid');
    showLoading(productsGrid);
    
    setTimeout(() => {
        productsGrid.innerHTML = '';
        const filteredProducts = categoryFilter === 'all' 
            ? products 
            : products.filter(product => product.category === categoryFilter);
        
        const fragment = document.createDocumentFragment();
        
        filteredProducts.forEach((product, index) => {
            const card = document.createElement('div');
            card.className = 'product-card';
            card.style.animation = `fadeIn 0.2s ease-out forwards ${index * 0.05}s`;
            card.innerHTML = `
                <div class="product-emoji">${product.emoji}</div>
                ${product.highlight ? `<span class="product-highlight">${product.highlight}</span>` : ''}
                <h3 class="product-title">${product.name}</h3>
                <p class="product-price">R$ ${product.price.toFixed(2)}</p>
                <p class="product-description">${product.shortDescription}</p>
                <button class="add-to-cart-btn" data-product-id="${product.id}">
                    Adicionar ao Carrinho üõí
                </button>
            `;
            
            card.addEventListener('click', (e) => {
                if (!e.target.classList.contains('add-to-cart-btn')) {
                    openPreviewModal(product);
                }
            });
            
            fragment.appendChild(card);
        });
        
        productsGrid.appendChild(fragment);
    }, 100);
}

// Fun√ß√£o para buscar produtos
export function searchProducts(query) {
    const normalizedQuery = query.toLowerCase().trim();
    
    if (!normalizedQuery) {
        renderProducts();
        return;
    }
    
    const filteredProducts = products.filter(product => 
        product.name.toLowerCase().includes(normalizedQuery) ||
        product.description.toLowerCase().includes(normalizedQuery)
    );
    
    const productsGrid = document.getElementById('productsGrid');
    productsGrid.innerHTML = '';
    
    if (filteredProducts.length === 0) {
        productsGrid.innerHTML = `
            <div class="no-results">
                <p>Nenhum produto encontrado üòï</p>
            </div>
        `;
        return;
    }
    
    filteredProducts.forEach(product => {
        const card = document.createElement('div');
        card.className = 'product-card';
        card.innerHTML = `
            <div class="product-emoji">${product.emoji}</div>
            ${product.highlight ? `<span class="product-highlight">${product.highlight}</span>` : ''}
            <h3 class="product-title">${product.name}</h3>
            <p class="product-price">R$ ${product.price.toFixed(2)}</p>
            <p class="product-description">${product.description}</p>
            <button class="add-to-cart-btn" data-product-id="${product.id}">
                Adicionar ao Carrinho üõí
            </button>
        `;
        productsGrid.appendChild(card);
    });
}

// Fun√ß√£o para renderizar ofertas rel√¢mpago
export function renderFlashDeals() {
    const flashDealsGrid = document.getElementById('flashDealsGrid');
    flashDealsGrid.innerHTML = '';

    flashDeals.forEach(deal => {
        const card = document.createElement('div');
        card.className = 'flash-deal-card';
        
        const discount = ((deal.oldPrice - deal.price) / deal.oldPrice * 100).toFixed(0);
        
        card.innerHTML = `
            <div class="flash-deal-badge">${discount}% OFF</div>
            <div class="product-emoji">${deal.emoji}</div>
            <h3 class="product-title">${deal.name}</h3>
            <div class="product-price-container">
                <p class="product-old-price">De R$ ${deal.oldPrice.toFixed(2)}</p>
                <p class="product-price">Por R$ ${deal.price.toFixed(2)}</p>
            </div>
            <p class="product-description">${deal.description}</p>
            <div class="stock-warning">
                Apenas ${deal.stock} unidades dispon√≠veis!
            </div>
            <button class="add-to-cart-btn pulse-animation" data-product-id="${deal.id}">
                Comprar Agora üî•
            </button>
        `;
        
        flashDealsGrid.appendChild(card);
    });
} 